name: Build Executable

on:
  workflow_dispatch:

jobs:
  build_UI_mac:
    runs-on: macos-latest  
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
  
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-local.txt --target .
          pip install py2app

      - name: Convert source files to UTF-8
        run: |
          find ./ -type f -name "*.py" | while read file; do
            if ! iconv -f UTF-8 -t UTF-8 "$file" > /dev/null 2>&1; then
              echo "Fixing encoding: $file"
              iconv -f ISO-8859-1 -t UTF-8 "$file" > "${file}.utf8" && mv "${file}.utf8" "$file"
            fi
          done

      - name: Build macOS .app bundle with setupUI_mac.py
        run: |
          python setupUI_mac.py py2app
          if [ $? -ne 0 ]; then
            echo "setupUI_mac.py build failed"
            exit 1
          fi
  
      - name: Build macOS .app bundle with setupBLE_mac.py
        run: |
          python setupBLE_mac.py py2app
          if [ $? -ne 0 ]; then
            echo "setupBLE_mac.py build failed"
            exit 1
          fi

      - name: List build outputs for debugging
        run: |
          echo "Contents of current directory:"
          ls -la
          echo "Contents of dist directory (if exists):"
          ls -la dist/ || echo "dist directory not found"
          echo "Contents of build directory (if exists):"
          ls -la build/ || echo "build directory not found"

      - name: Create DMG from .app bundle
        run: |
          # Create temporary directory for DMG contents
          mkdir -p dmg_temp
          cp -R dist/AstroDwarfScheduler.app dmg_temp/
          cp -R dist/DwarfiumBLEConnect.app dmg_temp/
          
          hdiutil create -volname "AstroDwarfScheduler" \
            -srcfolder dmg_temp \
            -ov -format UDZO AstroDwarfScheduler-GUI-mac.dmg
          
          # Clean up temp directory
          rm -rf dmg_temp
  
      - name: List files to verify DMG creation
        run: ls -l AstroDwarfScheduler-GUI-mac.dmg
  
      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: AstroDwarfScheduler-GUI-mac
          path: AstroDwarfScheduler-GUI-mac.dmg

  build_console_mac:
    runs-on: macos-latest  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
  
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-local.txt --target .
          pip install py2app

      - name: Convert source files to UTF-8
        run: |
          find ./ -type f -name "*.py" | while read file; do
            if ! iconv -f UTF-8 -t UTF-8 "$file" > /dev/null 2>&1; then
              echo "Fixing encoding: $file"
              iconv -f ISO-8859-1 -t UTF-8 "$file" > "${file}.utf8" && mv "${file}.utf8" "$file"
            fi
          done

      - name: Build macOS .app bundle with setupCMD_mac.py
        run: |
          python setupCMD_mac.py py2app
          if [ $? -ne 0 ]; then
            echo "setupCMD_mac.py build failed"
            exit 1
          fi
  
      - name: Build macOS .app bundle with setupBLE_mac.py
        run: |
          python setupBLE_mac.py py2app
          if [ $? -ne 0 ]; then
            echo "setupBLE_mac.py build failed"
            exit 1
          fi

      - name: List build outputs for debugging
        run: |
          echo "Contents of current directory:"
          ls -la
          echo "Contents of dist directory (if exists):"
          ls -la dist/ || echo "dist directory not found"
          echo "Contents of build directory (if exists):"
          ls -la build/ || echo "build directory not found"
        
      - name: Create DMG from .app bundle
        run: |
          # Create temporary directory for DMG contents
          mkdir -p dmg_temp
          cp -R dist/AstroDwarfSchedulerConsole.app dmg_temp/
          cp -R dist/DwarfiumBLEConnect.app dmg_temp/
          
          hdiutil create -volname "AstroDwarfSchedulerConsole" \
            -srcfolder dmg_temp \
            -ov -format UDZO AstroDwarfScheduler-Console-mac.dmg
          
          # Clean up temp directory
          rm -rf dmg_temp
  
      - name: List files to verify Console creation
        run: ls -l AstroDwarfScheduler-Console-mac.dmg
  
      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: AstroDwarfScheduler-Console-mac
          path: AstroDwarfScheduler-Console-mac.dmg

  build_UI:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-local.txt --target .
          pip install cx_Freeze

      - name: Build the executable with setupUI.py
        run: |
          python setupUI.py build
        continue-on-error: true

      - name: Set up Python3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-local.txt --target .
          pip install cx_Freeze

      - name: Build the executable with setupBLE.py
        run: |
          python setupBLE.py build
        continue-on-error: true

      - name: Move and rename to extern
        run: |
          powershell Move-Item -Path build\exe.win-amd64-3.11 -Destination build\exe.win-amd64-3.12\extern

      - name: create symbolic link
        run: |
           cmd /c mklink .\build\exe.win-amd64-3.12\extern\config.py .\build\exe.win-amd64-3.12\config.py
           cmd /c mklink .\build\exe.win-amd64-3.12\extern\config.ini .\build\exe.win-amd64-3.12\config.ini

      - name: Compress with tar (preserve symlinks)
        uses: a7ul/tar-action@v1.1.0
        id: compress
        with:
          command: c
          cwd: ./build/exe.win-amd64-3.12
          files: |
            ./
          outPath: AstroDwarfScheduler-GUI.tar.gz

      - name: List files to verify tar creation
        run: ls -l AstroDwarfScheduler-GUI.tar.gz
  
      - name: Upload zipped GUI executable
        uses: actions/upload-artifact@v4
        with:
          name: AstroDwarfScheduler-GUI
          path: AstroDwarfScheduler-GUI.tar.gz

  build_console:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-local.txt --target .
          pip install cx_Freeze

      - name: Build the executable with setupCMD.py
        run: |
          python setupCMD.py build
        continue-on-error: true

      - name: Set up Python3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-local.txt --target .
          pip install cx_Freeze

      - name: Build the executable with setupBLE.py
        run: |
          python setupBLE.py build
        continue-on-error: true

      - name: Move and rename to extern
        run: |
          powershell Move-Item -Path build\exe.win-amd64-3.11 -Destination build\exe.win-amd64-3.12\extern

      - name: create symbolic link
        run: |
           cmd /c mklink .\build\exe.win-amd64-3.12\extern\config.py .\build\exe.win-amd64-3.12\config.py
           cmd /c mklink .\build\exe.win-amd64-3.12\extern\config.ini .\build\exe.win-amd64-3.12\config.ini

      - name: Compress with tar (preserve symlinks)
        uses: a7ul/tar-action@v1.1.0
        id: compress
        with:
          command: c
          cwd: ./build/exe.win-amd64-3.12
          files: |
            ./
          outPath: AstroDwarfScheduler-Console.tar.gz

      - name: List files to verify tar creation
        run: ls -l AstroDwarfScheduler-Console.tar.gz
  
      - name: Upload zipped Console executable
        uses: actions/upload-artifact@v4
        with:
          name: AstroDwarfScheduler-Console
          path: AstroDwarfScheduler-Console.tar.gz

  build_UI_linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-local.txt
          pip install pyinstaller

      - name: Build GUI executable with PyInstaller
        run: |
          # Check what files exist
          echo "Checking available files:"
          ls -la
          
          # Build with only existing files
          PYINSTALLER_ARGS="--onedir --windowed --name AstroDwarfScheduler"
          
          if [ -d "dwarf_ble_connect" ]; then
            PYINSTALLER_ARGS="$PYINSTALLER_ARGS --add-data dwarf_ble_connect:dwarf_ble_connect"
          fi
          
          if [ -f "config.ini" ]; then
            PYINSTALLER_ARGS="$PYINSTALLER_ARGS --add-data config.ini:."
          fi
          
          if [ -f "config.py" ]; then
            PYINSTALLER_ARGS="$PYINSTALLER_ARGS --add-data config.py:."
          fi
          
          if [ -d "Astro_Sessions" ]; then
            PYINSTALLER_ARGS="$PYINSTALLER_ARGS --add-data Astro_Sessions:Astro_Sessions"
          fi
          
          echo "Running: pyinstaller $PYINSTALLER_ARGS astro_dwarf_session_UI.py"
          pyinstaller $PYINSTALLER_ARGS astro_dwarf_session_UI.py

      - name: Build BLE Connect executable
        run: |
          # Check what files exist
          echo "Checking available files for BLE:"
          ls -la
          
          # Build with only existing files
          PYINSTALLER_ARGS="--onedir --name DwarfiumBLEConnect"
          
          if [ -d "dwarf_ble_connect" ]; then
            PYINSTALLER_ARGS="$PYINSTALLER_ARGS --add-data dwarf_ble_connect:dwarf_ble_connect"
          fi
          
          echo "Running: pyinstaller $PYINSTALLER_ARGS connect_bluetooth.py"
          pyinstaller $PYINSTALLER_ARGS connect_bluetooth.py

      - name: Organize files for distribution
        run: |
          mkdir -p linux_dist
          
          # Copy GUI files if they exist
          if [ -d "dist/AstroDwarfScheduler" ]; then
            cp -r dist/AstroDwarfScheduler/* linux_dist/
          else
            echo "Warning: AstroDwarfScheduler not found"
          fi
          
          # Copy BLE files if they exist
          mkdir -p linux_dist/extern
          if [ -d "dist/DwarfiumBLEConnect" ]; then
            cp -r dist/DwarfiumBLEConnect/* linux_dist/extern/
          else
            echo "Warning: DwarfiumBLEConnect not found"
          fi
          
      - name: Create start scripts
        run: |
          # Create GUI launcher script
          cat > linux_dist/astro-dwarf-scheduler-gui.sh << 'EOF'
          #!/bin/bash
          cd "$(dirname "$0")"
          ./AstroDwarfScheduler
          EOF
          chmod +x linux_dist/astro-dwarf-scheduler-gui.sh
          
          # Create BLE launcher script
          cat > linux_dist/dwarfium-ble-connect.sh << 'EOF'
          #!/bin/bash
          cd "$(dirname "$0")/extern"
          ./DwarfiumBLEConnect
          EOF
          chmod +x linux_dist/dwarfium-ble-connect.sh

      - name: Create tar.gz archive
        run: |
          tar -czf AstroDwarfScheduler-GUI-linux.tar.gz -C linux_dist .

      - name: Upload Linux GUI executable
        uses: actions/upload-artifact@v4
        with:
          name: AstroDwarfScheduler-GUI-linux
          path: AstroDwarfScheduler-GUI-linux.tar.gz

  build_console_linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-local.txt
          pip install pyinstaller

      - name: Build Console executable with PyInstaller
        run: |
          # Check what files exist
          echo "Checking available files:"
          ls -la
          
          # Build with only existing files
          PYINSTALLER_ARGS="--onedir --name AstroDwarfSchedulerConsole"
          
          if [ -d "dwarf_ble_connect" ]; then
            PYINSTALLER_ARGS="$PYINSTALLER_ARGS --add-data dwarf_ble_connect:dwarf_ble_connect"
          fi
          
          if [ -f "config.ini" ]; then
            PYINSTALLER_ARGS="$PYINSTALLER_ARGS --add-data config.ini:."
          fi
          
          if [ -f "config.py" ]; then
            PYINSTALLER_ARGS="$PYINSTALLER_ARGS --add-data config.py:."
          fi
          
          if [ -d "Astro_Sessions" ]; then
            PYINSTALLER_ARGS="$PYINSTALLER_ARGS --add-data Astro_Sessions:Astro_Sessions"
          fi
          
          echo "Running: pyinstaller $PYINSTALLER_ARGS astro_dwarf_scheduler.py"
          pyinstaller $PYINSTALLER_ARGS astro_dwarf_scheduler.py

      - name: Build BLE Connect executable
        run: |
          # Check what files exist
          echo "Checking available files for BLE:"
          ls -la
          
          # Build with only existing files
          PYINSTALLER_ARGS="--onedir --name DwarfiumBLEConnect"
          
          if [ -d "dwarf_ble_connect" ]; then
            PYINSTALLER_ARGS="$PYINSTALLER_ARGS --add-data dwarf_ble_connect:dwarf_ble_connect"
          fi
          
          echo "Running: pyinstaller $PYINSTALLER_ARGS connect_bluetooth.py"
          pyinstaller $PYINSTALLER_ARGS connect_bluetooth.py

      - name: Organize files for distribution
        run: |
          mkdir -p linux_dist
          
          # Copy Console files if they exist
          if [ -d "dist/AstroDwarfSchedulerConsole" ]; then
            cp -r dist/AstroDwarfSchedulerConsole/* linux_dist/
          else
            echo "Warning: AstroDwarfSchedulerConsole not found"
          fi
          
          # Copy BLE files if they exist
          mkdir -p linux_dist/extern
          if [ -d "dist/DwarfiumBLEConnect" ]; then
            cp -r dist/DwarfiumBLEConnect/* linux_dist/extern/
          else
            echo "Warning: DwarfiumBLEConnect not found"
          fi
          
      - name: Create start scripts
        run: |
          # Create Console launcher script
          cat > linux_dist/astro-dwarf-scheduler-console.sh << 'EOF'
          #!/bin/bash
          cd "$(dirname "$0")"
          ./AstroDwarfSchedulerConsole
          EOF
          chmod +x linux_dist/astro-dwarf-scheduler-console.sh
          
          # Create BLE launcher script
          cat > linux_dist/dwarfium-ble-connect.sh << 'EOF'
          #!/bin/bash
          cd "$(dirname "$0")/extern"
          ./DwarfiumBLEConnect
          EOF
          chmod +x linux_dist/dwarfium-ble-connect.sh

      - name: Create tar.gz archive
        run: |
          tar -czf AstroDwarfScheduler-Console-linux.tar.gz -C linux_dist .

      - name: Upload Linux Console executable
        uses: actions/upload-artifact@v4
        with:
          name: AstroDwarfScheduler-Console-linux
          path: AstroDwarfScheduler-Console-linux.tar.gz

  build_installer:
    runs-on: windows-latest
    needs: [build_UI, build_console]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-local.txt --target .
          pip install cx_Freeze

      - name: Build the executable with setupUI.py
        run: |
          python setupUI.py build

      - name: Set up Python3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-local.txt --target .
          pip install cx_Freeze

      - name: Build the executable with setupBLE.py
        run: |
          python setupBLE.py build

      - name: Copy BLE utility to Install folder
        run: |
          if (!(Test-Path "Install\dwarf_ble_connect")) { New-Item -ItemType Directory -Path "Install\dwarf_ble_connect" -Force }
          Copy-Item -Path "build\exe.win-amd64-3.11\*" -Destination "Install\dwarf_ble_connect\" -Recurse -Force

      - name: Debug - List Install structure
        run: |
          Write-Host "Install directory:"
          Get-ChildItem Install\
          Write-Host "BLE Connect directory:"
          Get-ChildItem Install\dwarf_ble_connect\
          Write-Host "Config files check:"
          if (Test-Path "Install\config.py") { Write-Host "config.py exists in Install" }
          if (Test-Path "Install\config.ini") { Write-Host "config.ini exists in Install" }

      - name: Install Inno Setup
        run: |
          choco install innosetup -y

      - name: Build Installer with Inno Setup
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" AstroDwarfScheduler.iss

      - name: List installer files
        run: |
          dir installer\

      - name: Upload Installer
        uses: actions/upload-artifact@v4
        with:
          name: AstroDwarfScheduler-Installer
          path: installer\AstroDwarfScheduler-Setup.exe

  release:
    runs-on: ubuntu-latest
    needs: [build_UI_mac, build_console_mac, build_UI, build_console, build_UI_linux, build_console_linux, build_installer]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download UI MAC executable artifact
        uses: actions/download-artifact@v4
        with:
          name: AstroDwarfScheduler-GUI-mac

      - name: Download Console MAC executable artifact
        uses: actions/download-artifact@v4
        with:
          name: AstroDwarfScheduler-Console-mac

      - name: Download UI WIN executable artifact
        uses: actions/download-artifact@v4
        with:
          name: AstroDwarfScheduler-GUI

      - name: Download Console WIN executable artifact
        uses: actions/download-artifact@v4
        with:
          name: AstroDwarfScheduler-Console

      - name: Download Windows Installer artifact
        uses: actions/download-artifact@v4
        with:
          name: AstroDwarfScheduler-Installer

      - name: Download GUI Linux executable artifact
        uses: actions/download-artifact@v4
        with:
          name: AstroDwarfScheduler-GUI-linux

      - name: Download Console Linux executable artifact
        uses: actions/download-artifact@v4
        with:
          name: AstroDwarfScheduler-Console-linux

      - name: Get version from CHANGELOG.md
        id: get_version
        run: |
          RAW_VERSION=$(grep -oP '(?<=## \[)[^]]*' CHANGELOG.md | head -n 1)
          # Ensure version has at least 3 parts (x.y.z format)
          if [[ $RAW_VERSION =~ ^[0-9]+\.[0-9]+$ ]]; then
            FORMATTED_VERSION="${RAW_VERSION}.0"
          else
            FORMATTED_VERSION="${RAW_VERSION}"
          fi
          echo "RVERSION=${FORMATTED_VERSION}" >> $GITHUB_ENV
          echo "Extracted version: ${FORMATTED_VERSION}"

      - name: Check for files
        id: checkfiles
        run: ls /home/runner/work/astro_dwarf_session/astro_dwarf_session/

      - name: Release with ncipollo/release-action
        id: release
        uses: ncipollo/release-action@v1
        with:
          artifacts: AstroDwarfScheduler*
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true
          skipIfReleaseExists: true
          tag: v${{ env.RVERSION }}